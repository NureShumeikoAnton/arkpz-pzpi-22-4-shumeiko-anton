Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ
до практичної роботи №1 з дисципліни
"Аналіз та рефакторинг коду"
на тему: "Правила оформлення програмного коду"




Виконав ст. гр. ПЗПІ-22-4
Шумейко Антон Олександрович

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович








Харків 2024
МЕТА
Ознайомитись з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навчитися аналізувати та рефакторити код для покращення його якості.

ВСТУП
Правильне оформлення коду має критичне значення для читабельності, підтримуваності та подальшого розвитку проектів. Чистий код полегшує його розуміння як для автора, так і для інших розробників. Правильне оформлення програмного коду має велике значення. Ось декілька з очевидних переваг:
˗	Код, який легко читати, не потребує надмірних пояснень
˗	Добре структурований код зрозумілий навіть для сторонніх розробників
˗	Легше вносити зміни й виправлення у чистий код
Отже, розглянемо рекомендації оформлення програмного коду для мови програмування “Java” та деякі приклади до них.

ХІД РОБОТИ

	Рекомендація: Імена мають передавати наміри програміста
	Опис: Змінна чи функція не повинна потребувати додаткового пояснення, уся інформація повинна міститись у її назві. Це підвищить читабельність коду та дозволить уникнути зайвих пояснень у коментарях.
Приклад:

// поганий код
int a = 5; // customers count

// гарний код
int customersCount = 5;


// …

// погана назва функції

public static int a(int num1, int num2) {
    return num1 * num2;
}

// правильна назва функції
public static int multiply(int num1, int num2) {
    return num1 * num2;
}

Рекомендація: Уникайте дезінформації
	Опис: Деякі імена можуть викликати помилкові асоціації у програмістів, що будуть читати ваш код у майбутньому. Як приклад слово “list” у назві змінних зазвичай має значення не просто масиву даних, а ще й вказує на конкретний тип даних. Якщо тип даних не збігається краще використати іншу назву.
Приклад:

// поганий код
int[] numberList = new int[5];

// гарний код
int[] numbers = new int[5];

Рекомендація: Коментар слід використовувати в останню чергу
	Опис: Так само як гарний коментар може покращити розуміння коду, так і поганий коментар може його погіршити. Насправді, коментарі є неминучим злом [1]. Якби програміст зумів виразити свої намірі у коді, коментарі і зовсім були б непотрібні. Частіше за все коментар можна просто замінити вдалою назвою функції.
Приклад:

// поганий код
// перевірка на пустоту
if(customersCount == 0){

}

// гарний код
if(isCustomersEmpty(customersCount)){
System.out.println("Customers list is empty");
}
Рекомендація: Функція має виконувати тільки одну операцію.
	Опис: Функції повинні бути стислими та зрозумілими. Якщо функція буде виконувати багато різних задач, знайти помилку у коді буде набагато важче. Розділивши складну функцію на більш прості можна не тільки полегшити процес налагодження програми, а й зробити код більш читабельним.
Приклад:

// поганий код
public void processData(int data) {
if (!validate(data)) {
     		throw new IllegalArgumentException("Invalid data");
    	}
    	save(data);
    	System.out.println("Data processed");
}

// гарний код
    public void processData(int data) {
        validateData(data);
        saveData(data);
        logDataProcessing();
    }

    private void validateData(int data) {
        if (!validate(data)) {
            throw new IllegalArgumentException("Invalid data");
        }
    }

    private void saveData(int data) {
        save(data);
    }

    private void logDataProcessing() {
        System.out.println("Data processed");
    }

Рекомендація: Уникайте дублювання коду
	Опис: Уникаючи дублювання, ви покращуєте підтримуваність коду, оскільки зміни вносяться лише в одному місці. Дублювання коду збільшує складність підтримки проєкту та підвищує ризик помилок. Якщо одна і та ж логіка повторюється в кількох місцях, це ускладнює внесення змін, оскільки зміни потрібно застосовувати всюди.
Приклад:

// поганий приклад
public class OrderProcessor {
    public void processOnlineOrder(Order order) {
        if (!validateOrder(order)) {
            throw new IllegalArgumentException("Invalid order");
        }
        saveOrder(order);
        sendConfirmation(order);
    }

    public void processInStoreOrder(Order order) {
        if (!validateOrder(order)) {
            throw new IllegalArgumentException("Invalid order");
        }
        saveOrder(order);
        sendConfirmation(order);
    }
}

// гарний приклад
public class OrderProcessor {
    public void processOrder(Order order) {
        if (!validateOrder(order)) {
            throw new IllegalArgumentException("Invalid order");
        }
        saveOrder(order);
        sendConfirmation(order);
    }

    public void processOnlineOrder(Order order) {
        processOrder(order);
    }

    public void processInStoreOrder(Order order) {
        processOrder(order);
    }
}
Рекомендація: Дужки завжди повинні бути на окремих рядках.
	Опис: Іноді існує можливість позбутися горизонтальних відступів, коли if або while містять лише одну строку. Але все одно не варто так робити, оскільки такий підхід значно погіршує читабельність коду, що ускладнює роботу у майбутньому.
Приклад:

// Поганий приклад
if (condition) {doSomething();}

// Гарний приклад
if (condition) {
doSomething();
}
Рекомендація: Використовуйте "Газетну метафору" для структурування коду.
	Опис: Організовуйте код так, щоб найважливіші елементи (основні методи, загальна логіка) знаходились на початку файлу, а допоміжні функції — нижче. Це дозволяє швидко зрозуміти призначення коду, аналогічно до того, як у статтях газети найважливіша інформація подається першою. Такий підхід підвищує читабельність і підтримуваність коду, дозволяючи розробникам швидко орієнтуватися в основних методах і логіці класу, не заглиблюючись у деталі допоміжних функцій.
Приклад:

// поганий приклад
public class OrderProcessor {
    // Допоміжна функція для перевірки наявності товару
    private boolean isProductAvailable(Order order) {
        // Перевірка наявності товару
        return true;
    }

    // Допоміжна функція для обробки доставки
    private void processDelivery(Order order) {
        // Обробка доставки
    }


    // Основна функція для обробки замовлення
    public void processOrder(Order order) {
        if (isProductAvailable(order)) {
            processDelivery(order);
        }
    }
}
// гарний приклад
public class OrderProcessor {
    // Основна функція для обробки замовлення
    public void processOrder(Order order) {
        if (isProductAvailable(order)) {
            processDelivery(order);
        }
    }

    // Допоміжна функція для перевірки наявності товару
    private boolean isProductAvailable(Order order) {
        // Перевірка наявності товару
        return true;
    }

    // Допоміжна функція для обробки доставки
    private void processDelivery(Order order) {
        // Обробка доставки
    }
}	
ВИСНОВКИ

	Правила оформлення коду відіграють ключову роль у створенні якісного та підтримуваного програмного забезпечення. Дотримання таких принципів, як використання осмислених імен, уникнення дублювання, чітка структура та форматування коду, робить код не лише зрозумілим для розробників, але й полегшує його розширення та модифікацію. Такі підходи знижують ризик виникнення помилок, сприяють командній роботі та дозволяють іншим швидко вникати в суть проєкту.
	Дотримуючись перелічених вище правил мають свої переваги:
˗	Правильно створені назви змінних та функцій не потребують додаткових пояснень, що поліпшує розуміння коду
˗	Правильно створені функції забезпечують швидкий пошук інформації у коді, а також значно полегшують подальшу роботу із ним
˗	Форматування відповідно нормам значно покращує читаність коду
˗	Дотримання усіх перелічених правил оформлення програмного коду значно посилює продуктивність під час роботи із ним
Використання принципів "Чистого коду", зокрема "Газетної метафори", дозволяє структурувати код, роблячи його більш читабельним, зручним для підтримки та оптимізованим для розуміння. Важливо пам'ятати, що правильно організований код не лише полегшує роботу розробникам, але й позитивно впливає на загальну якість програмного продукту. 
Посилання на відеозвіт з практичного заняття: https://youtu.be/jIQ6dfYNbXs
 
СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ

	1. Роберт М. Clean Code: A Handbook of Agile Software Craftsmanship. 2024. 448 с.

 
Додаток А
Презентація 
«Правила оформлення програмного коду мови програмування Java»